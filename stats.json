{"errors":[],"warnings":["ship.js from UglifyJs\nDropping unused variable property [ship.js:122,9]\nDropping side-effect-free statement [ship.js:73,7]\nSide effects in initialization of unused variable _name [ship.js:141,13]"],"version":"1.9.10","hash":"f7147b47ee350375c847","time":986,"publicPath":"/","assetsByChunkName":{"ship":"ship.js"},"assets":[{"name":"ship.js","size":1826,"chunks":[0],"chunkNames":["ship"],"emitted":true}],"chunks":[{"id":0,"rendered":true,"initial":true,"entry":true,"extraAsync":false,"size":3154,"names":["ship"],"files":["ship.js"],"hash":"5a3d98d8edec6986910f","parents":[],"modules":[{"id":0,"identifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","name":"./src/ship.js","size":3154,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"source":"\"use strict\";\n\n(function () {\n\n  // Create a queue, but don't obliterate an existing one!\n  var analytics = window.analytics = window.analytics || [];\n\n  // If the real analytics.js is already on the page return.\n  if (analytics.initialize) return;\n\n  // If the snippet was invoked already show an error.\n  if (analytics.invoked) {\n    if (window.console && console.error) {\n      console.error(\"Segment snippet included twice.\");\n    }\n    return;\n  }\n\n  // Invoked flag, to make sure the snippet\n  // is never invoked twice.\n  analytics.invoked = true;\n\n  // A list of the methods in Analytics.js to stub.\n  analytics.methods = [\"trackSubmit\", \"trackClick\", \"trackLink\", \"trackForm\", \"pageview\", \"identify\", \"group\", \"track\", \"ready\", \"alias\", \"page\", \"once\", \"off\", \"on\"];\n\n  // Define a factory to create stubs. These are placeholders\n  // for methods in Analytics.js so that you never have to wait\n  // for it to load to actually record data. The `method` is\n  // stored as the first argument, so we can replay the data.\n  analytics.factory = function (method) {\n    return function () {\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    };\n  };\n\n  // For each of our methods, generate a queueing stub.\n  for (var i = 0; i < analytics.methods.length; i++) {\n    var key = analytics.methods[i];\n    analytics[key] = analytics.factory(key);\n  }\n\n  // Define a method to load Analytics.js from our CDN,\n  // and that will be sure to only ever load it once.\n  analytics.load = function (key) {\n    // Create an async script element based on your key.\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.async = true;\n    script.src = (\"https:\" === document.location.protocol ? \"https://\" : \"http://\") + \"cdn.segment.com/analytics.js/v1/\" + key + \"/analytics.min.js\";\n\n    // Insert our script next to the first script element.\n    var first = document.getElementsByTagName(\"script\")[0];\n    first.parentNode.insertBefore(script, first);\n  };\n\n  // Add a version to keep track of what's in the wild.\n  analytics.SNIPPET_VERSION = \"3.0.1\";\n\n  function getProperty(obj, propertyName) {\n    var property;\n    for (var i = 0; i < obj.identities.length; i++) {\n      var identity = obj.identities[i];\n      if (identity[propertyName]) {\n        return identity[propertyName];\n      }\n    };\n  }\n\n  window.analytics = analytics;\n\n  Hull.onEmbed(function (element, deployment, hull) {\n\n    analytics.load(deployment.ship.settings.project_id);\n    analytics.page();\n\n    var identify = function identify(me) {\n      if (me) {\n        var email = me.email || getProperty(me, \"email\");\n        var _name = me.name || me.username || getProperty(me, \"name\") || getProperty(me, \"username\") || email;\n        window.analytics && window.analytics.identify(me.id, me);\n      }\n    };\n\n    var track = function track(payload) {\n      window.analytics && window.analytics.track(payload.event, payload.params);\n    };\n\n    Hull.on(\"hull.track\", track);\n    Hull.on(\"hull.user.*\", identify);\n    identify(hull.currentUser());\n  });\n})();"}],"filteredModules":0,"origins":[{"moduleId":0,"module":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","moduleIdentifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","moduleName":"./src/ship.js","loc":"","name":"ship","reasons":[]}]}],"modules":[{"id":0,"identifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","name":"./src/ship.js","size":3154,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"source":"\"use strict\";\n\n(function () {\n\n  // Create a queue, but don't obliterate an existing one!\n  var analytics = window.analytics = window.analytics || [];\n\n  // If the real analytics.js is already on the page return.\n  if (analytics.initialize) return;\n\n  // If the snippet was invoked already show an error.\n  if (analytics.invoked) {\n    if (window.console && console.error) {\n      console.error(\"Segment snippet included twice.\");\n    }\n    return;\n  }\n\n  // Invoked flag, to make sure the snippet\n  // is never invoked twice.\n  analytics.invoked = true;\n\n  // A list of the methods in Analytics.js to stub.\n  analytics.methods = [\"trackSubmit\", \"trackClick\", \"trackLink\", \"trackForm\", \"pageview\", \"identify\", \"group\", \"track\", \"ready\", \"alias\", \"page\", \"once\", \"off\", \"on\"];\n\n  // Define a factory to create stubs. These are placeholders\n  // for methods in Analytics.js so that you never have to wait\n  // for it to load to actually record data. The `method` is\n  // stored as the first argument, so we can replay the data.\n  analytics.factory = function (method) {\n    return function () {\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    };\n  };\n\n  // For each of our methods, generate a queueing stub.\n  for (var i = 0; i < analytics.methods.length; i++) {\n    var key = analytics.methods[i];\n    analytics[key] = analytics.factory(key);\n  }\n\n  // Define a method to load Analytics.js from our CDN,\n  // and that will be sure to only ever load it once.\n  analytics.load = function (key) {\n    // Create an async script element based on your key.\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.async = true;\n    script.src = (\"https:\" === document.location.protocol ? \"https://\" : \"http://\") + \"cdn.segment.com/analytics.js/v1/\" + key + \"/analytics.min.js\";\n\n    // Insert our script next to the first script element.\n    var first = document.getElementsByTagName(\"script\")[0];\n    first.parentNode.insertBefore(script, first);\n  };\n\n  // Add a version to keep track of what's in the wild.\n  analytics.SNIPPET_VERSION = \"3.0.1\";\n\n  function getProperty(obj, propertyName) {\n    var property;\n    for (var i = 0; i < obj.identities.length; i++) {\n      var identity = obj.identities[i];\n      if (identity[propertyName]) {\n        return identity[propertyName];\n      }\n    };\n  }\n\n  window.analytics = analytics;\n\n  Hull.onEmbed(function (element, deployment, hull) {\n\n    analytics.load(deployment.ship.settings.project_id);\n    analytics.page();\n\n    var identify = function identify(me) {\n      if (me) {\n        var email = me.email || getProperty(me, \"email\");\n        var _name = me.name || me.username || getProperty(me, \"name\") || getProperty(me, \"username\") || email;\n        window.analytics && window.analytics.identify(me.id, me);\n      }\n    };\n\n    var track = function track(payload) {\n      window.analytics && window.analytics.track(payload.event, payload.params);\n    };\n\n    Hull.on(\"hull.track\", track);\n    Hull.on(\"hull.user.*\", identify);\n    identify(hull.currentUser());\n  });\n})();"}],"filteredModules":0,"children":[]}