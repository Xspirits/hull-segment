{"errors":[],"warnings":["ship.js from UglifyJs\nDropping side-effect-free statement [ship.js:132,7]"],"version":"1.10.1","hash":"7fa92565d50a0dbb67e4","publicPath":"/","assetsByChunkName":{"ship":"ship.js"},"assets":[{"name":"ship.js","size":2037,"chunks":[0],"chunkNames":["ship"],"emitted":true},{"name":"/Users/romain/Sites/Ships/hull-segment/dist/stats.json","size":0,"chunks":[],"chunkNames":[]}],"chunks":[{"id":0,"rendered":true,"initial":true,"entry":true,"extraAsync":false,"size":3638,"names":["ship"],"files":["ship.js"],"hash":"8e20175b058e184258a7","parents":[],"modules":[{"id":0,"identifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","name":"./src/ship.js","size":1332,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"source":"/* global require, Hull*/\n\n'use strict';\n\nvar segment = require('./segment');\nsegment();\n\n// function getProperty(obj, propertyName) {\n//   for (let i = 0; i < obj.identities.length; i++) {\n//     if (obj.identities[i][propertyName]) {\n//       return obj.identities[i][propertyName];\n//     }\n//   }\n// }\n\nfunction start(element, deployment, hull) {\n  if (window.analytics) {\n    window.analytics.load(deployment.ship.settings.project_id);\n    window.analytics.page();\n  }\n\n  function identify(me) {\n    if (me && window.analytics) {\n      var services = Hull.config().services.analytics || {};\n      var user = { id: me.id, name: me.name, email: me.email, username: me.username };\n      var options = {};\n      if (services && services.intercom) {\n        options.integrations = { Intercom: { user_hash: services.intercom.user_hash } };\n      }\n      window.analytics.identify(user.id, user, options);\n    }\n  }\n  // const email = me.email || getProperty(me, 'email');\n  // const name = me.name || me.username || getProperty(me, 'name') || getProperty(me, 'username') || email;\n\n  function track(payload) {\n    if (window.analytics) {\n      window.analytics.track(payload.event, payload.params);\n    }\n  }\n\n  Hull.on('hull.track', track);\n  Hull.on('hull.user.*', identify);\n  identify(hull.currentUser());\n}\n\nHull.onEmbed(start);"},{"id":1,"identifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/segment.js","name":"./src/segment.js","size":2306,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":0,"moduleIdentifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","module":"./src/ship.js","moduleName":"./src/ship.js","type":"cjs require","userRequest":"./segment","loc":"5:14-34"}],"source":"/*global console, module*/\n\n'use strict';\n\nfunction segment() {\n\n  // Create a queue, but don't obliterate an existing one!\n  var analytics = window.analytics = window.analytics || [];\n\n  // If the real analytics.js is already on the page return.\n  if (analytics.initialize) {\n    return;\n  }\n\n  // If the snippet was invoked already show an error.\n  if (analytics.invoked) {\n    if (window.console && console.error) {\n      console.error('Segment snippet included twice.');\n    }\n    return;\n  }\n\n  // Invoked flag, to make sure the snippet\n  // is never invoked twice.\n  analytics.invoked = true;\n\n  // A list of the methods in Analytics.js to stub.\n  analytics.methods = ['trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'group', 'track', 'ready', 'alias', 'page', 'once', 'off', 'on'];\n\n  // Define a factory to create stubs. These are placeholders\n  // for methods in Analytics.js so that you never have to wait\n  // for it to load to actually record data. The `method` is\n  // stored as the first argument, so we can replay the data.\n  analytics.factory = function factoryFactory(method) {\n    return function factory() {\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    };\n  };\n\n  // For each of our methods, generate a queueing stub.\n  for (var i = 0; i < analytics.methods.length; i++) {\n    var key = analytics.methods[i];\n    analytics[key] = analytics.factory(key);\n  }\n\n  // Define a method to load Analytics.js from our CDN,\n  // and that will be sure to only ever load it once.\n  analytics.load = function load(key) {\n    // Create an async script element based on your key.\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.src = (document.location.protocol === 'https:' ? 'https://' : 'http://') + 'cdn.segment.com/analytics.js/v1/' + key + '/analytics.min.js';\n\n    // Insert our script next to the first script element.\n    var first = document.getElementsByTagName('script')[0];\n    first.parentNode.insertBefore(script, first);\n  };\n\n  // Add a version to keep track of what's in the wild.\n  analytics.SNIPPET_VERSION = '3.0.1';\n\n  window.analytics = analytics;\n}\n\nmodule.exports = segment;"}],"filteredModules":0,"origins":[{"moduleId":0,"module":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","moduleIdentifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","moduleName":"./src/ship.js","loc":"","name":"ship","reasons":[]}]}],"modules":[{"id":0,"identifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","name":"./src/ship.js","size":1332,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"source":"/* global require, Hull*/\n\n'use strict';\n\nvar segment = require('./segment');\nsegment();\n\n// function getProperty(obj, propertyName) {\n//   for (let i = 0; i < obj.identities.length; i++) {\n//     if (obj.identities[i][propertyName]) {\n//       return obj.identities[i][propertyName];\n//     }\n//   }\n// }\n\nfunction start(element, deployment, hull) {\n  if (window.analytics) {\n    window.analytics.load(deployment.ship.settings.project_id);\n    window.analytics.page();\n  }\n\n  function identify(me) {\n    if (me && window.analytics) {\n      var services = Hull.config().services.analytics || {};\n      var user = { id: me.id, name: me.name, email: me.email, username: me.username };\n      var options = {};\n      if (services && services.intercom) {\n        options.integrations = { Intercom: { user_hash: services.intercom.user_hash } };\n      }\n      window.analytics.identify(user.id, user, options);\n    }\n  }\n  // const email = me.email || getProperty(me, 'email');\n  // const name = me.name || me.username || getProperty(me, 'name') || getProperty(me, 'username') || email;\n\n  function track(payload) {\n    if (window.analytics) {\n      window.analytics.track(payload.event, payload.params);\n    }\n  }\n\n  Hull.on('hull.track', track);\n  Hull.on('hull.user.*', identify);\n  identify(hull.currentUser());\n}\n\nHull.onEmbed(start);"},{"id":1,"identifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/segment.js","name":"./src/segment.js","size":2306,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":0,"moduleIdentifier":"/Users/romain/Sites/Ships/hull-segment/node_modules/babel-loader/index.js!/Users/romain/Sites/Ships/hull-segment/src/ship.js","module":"./src/ship.js","moduleName":"./src/ship.js","type":"cjs require","userRequest":"./segment","loc":"5:14-34"}],"source":"/*global console, module*/\n\n'use strict';\n\nfunction segment() {\n\n  // Create a queue, but don't obliterate an existing one!\n  var analytics = window.analytics = window.analytics || [];\n\n  // If the real analytics.js is already on the page return.\n  if (analytics.initialize) {\n    return;\n  }\n\n  // If the snippet was invoked already show an error.\n  if (analytics.invoked) {\n    if (window.console && console.error) {\n      console.error('Segment snippet included twice.');\n    }\n    return;\n  }\n\n  // Invoked flag, to make sure the snippet\n  // is never invoked twice.\n  analytics.invoked = true;\n\n  // A list of the methods in Analytics.js to stub.\n  analytics.methods = ['trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'group', 'track', 'ready', 'alias', 'page', 'once', 'off', 'on'];\n\n  // Define a factory to create stubs. These are placeholders\n  // for methods in Analytics.js so that you never have to wait\n  // for it to load to actually record data. The `method` is\n  // stored as the first argument, so we can replay the data.\n  analytics.factory = function factoryFactory(method) {\n    return function factory() {\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    };\n  };\n\n  // For each of our methods, generate a queueing stub.\n  for (var i = 0; i < analytics.methods.length; i++) {\n    var key = analytics.methods[i];\n    analytics[key] = analytics.factory(key);\n  }\n\n  // Define a method to load Analytics.js from our CDN,\n  // and that will be sure to only ever load it once.\n  analytics.load = function load(key) {\n    // Create an async script element based on your key.\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.src = (document.location.protocol === 'https:' ? 'https://' : 'http://') + 'cdn.segment.com/analytics.js/v1/' + key + '/analytics.min.js';\n\n    // Insert our script next to the first script element.\n    var first = document.getElementsByTagName('script')[0];\n    first.parentNode.insertBefore(script, first);\n  };\n\n  // Add a version to keep track of what's in the wild.\n  analytics.SNIPPET_VERSION = '3.0.1';\n\n  window.analytics = analytics;\n}\n\nmodule.exports = segment;"}],"filteredModules":0,"children":[]}